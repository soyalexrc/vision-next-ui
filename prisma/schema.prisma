generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model AppConfig {
  id          String @id @default(cuid())
  code        String
  valie       String
  description String
}

model TemporalId {
  id String @id @default(cuid())
}

model DeleteFileRequest {
  id       String @id @default(cuid())
  path     String
  username String
  userId   String
  type     String
}

model Property {
  id                     String                 @id @default(cuid())
  userId                 String
  owner                  String?
  distribution           Json[]
  adjacencies            Json[]
  equipment              Json[]
  images                 String[]
  attributes             Json[]
  furnishedAreas         String[]
  documentsInformation   DocumentsInformation?
  generalInformation     GeneralInformation?
  locationInformation    LocationInformation?
  negotiationInformation NegotiationInfomation?
  statusHistory          PropertyStatusEntry?
  services               Service?
}

model DocumentsInformation {
  id                         String   @id @default(cuid())
  propertyId                 String   @unique
  propertyDoc                Boolean
  CIorRIF                    Boolean
  ownerCIorRIF               Boolean
  spouseCIorRIF              Boolean
  isCatastralRecordSameOwner Boolean
  condominiumSolvency        Boolean
  mainProperty               Boolean
  mortgageRelease            String
  condominiumSolvencyDetails String
  power                      String
  successionDeclaration      String
  courtRulings               String
  catastralRecordYear        String
  attorneyEmail              String
  attorneyPhone              String
  attorneyFirstName          String
  attorneyLastName           String
  property                   Property @relation(fields: [propertyId], references: [id])
}

model GeneralInformation {
  id                         String   @id @default(cuid())
  propertyId                 String   @unique
  status                     String
  code                       String
  footageGround              String
  footageBuilding            String
  description                String
  propertyType               String
  propertyCondition          String
  handoverKeys               Boolean
  termsAndConditionsAccepted Boolean
  antiquity                  String
  zoning                     String
  amountOfFloors             String
  propertiesPerFloor         String
  typeOfWork                 String
  isFurnished                Boolean
  isOccupiedByPeople         Boolean
  publicationTitle           String
  property                   Property @relation(fields: [propertyId], references: [id])
}

model LocationInformation {
  id                     String   @id @default(cuid())
  propertyId             String   @unique
  location               String
  nomenclature           String
  tower                  String
  amountOfFloors         String
  isClosedStreet         String
  country                String
  state                  String
  municipality           String
  urbanization           String
  avenue                 String
  street                 String
  buildingShoppingCenter String
  buildingNumber         String
  floor                  String
  referencePoint         String
  howToGet               String
  trunkNumber            String
  trunkLevel             String
  parkingNumber          String
  parkingLevel           String
  city                   String
  property               Property @relation(fields: [propertyId], references: [id])
}

model NegotiationInfomation {
  id                    String   @id @default(cuid())
  propertyId            String   @unique
  price                 String
  minimumNegotiation    String
  client                String
  reasonToSellOrRent    String
  partOfPayment         String
  mouthToMouth          Boolean
  realStateGroups       Boolean
  realStateWebPages     Boolean
  socialMedia           Boolean
  publicationOnBuilding Boolean
  operationType         String
  propertyExclusivity   String
  ownerPaysCommission   String
  rentCommission        String
  sellCommission        String
  ally                  String?
  externalAdviser       String?
  realStateAdviser      String
  property              Property @relation(fields: [propertyId], references: [id])
}

model PropertyStatusEntry {
  id         String   @id @default(cuid())
  propertyId String   @unique
  username   String
  status     String
  comments   String
  property   Property @relation(fields: [propertyId], references: [id])
}

model PropertyAttribute {
  id    String @id @default(cuid())
  value String
}

model Attribute {
  id           String @id @default(cuid())
  propertyType String
  formType     String
  label        String
  category     String
  placeholder  String
  options      String
  value        String
}

model Service {
  id          String      @id @default(cuid())
  title       String
  propertyId  String      @unique
  property    Property    @relation(fields: [propertyId], references: [id])
  subServices SubService?
}

model SubService {
  id        String  @id @default(cuid())
  service   String
  serviceId String  @unique
  Service   Service @relation(fields: [serviceId], references: [id])
}

model Categories {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  titlePlural String
  isFeatured  Boolean
}

model SocialMediaLink {
  id       Int    @id @default(autoincrement())
  title    String
  href     String
  iconName String
}
